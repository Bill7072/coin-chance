{
  "name": "json-rpc2",
  "version": "0.4.3",
  "description": "JSON-RPC 2.0 server and client library, with HTTP, TCP and Websocket endpoints",
  "main": "./src/jsonrpc.js",
  "keywords": [
    "json",
    "rpc",
    "rpc2",
    "json-rpc",
    "json-rpc2",
    "jsonrpc",
    "jsonrpc2",
    "server",
    "client",
    "tcp",
    "websocket",
    "http"
  ],
  "author": {
    "name": "Eric Florenzano",
    "email": "floguy@gmail.com",
    "url": "eflorenzano.com"
  },
  "dependencies": {
    "jsonparse": "*",
    "debug": "*",
    "lodash": "*",
    "es5class": "*",
    "faye-websocket": "*",
    "eventemitter3": "*"
  },
  "engines": {
    "node": "0.8.x || 0.10.x"
  },
  "contributors": [
    {
      "name": "Bill Casarin",
      "email": "bill@casarin.ca",
      "url": "jb55.com"
    },
    {
      "name": "Stefan Thomas",
      "email": "justmoon@members.fsf.org",
      "url": "justmoon.net"
    },
    {
      "name": "Paulo Cesar",
      "email": "email@pocesar.e4ward.com",
      "url": "github.com/pocesar"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/pocesar/node-jsonrpc2.git"
  },
  "devDependencies": {
    "mocha": "*",
    "expect.js": "*",
    "jshint": "*",
    "istanbul": "*"
  },
  "scripts": {
    "test": "jshint examples src test && mocha test/*.js",
    "coverage": "node ./node_modules/istanbul/lib/cli.js cover ./node_modules/mocha/bin/_mocha -- -t 5000 test/jsonrpc-test.js"
  },
  "readme": "[![Build Status](https://travis-ci.org/pocesar/node-jsonrpc2.png?branch=master)](https://travis-ci.org/pocesar/node-jsonrpc2)\n\n[![NPM](https://nodei.co/npm/json-rpc2.png?downloads=true)](https://nodei.co/npm/json-rpc2/)\n\n# node-jsonrpc2\n\nJSON-RPC 2.0 server and client library, with `HTTP` (with `Websocket` support) and `TCP` endpoints\n\nThis fork is a rewrite with proper testing framework, linted code, compatible with node 0.8.x and 0.10.x, class inheritance, and added functionalities\n\n## Install\n\nTo install node-jsonrpc2 in the current directory, run:\n\n```bash\nnpm install json-rpc2 --save\n```\n\n## Usage\n\nFiring up an efficient JSON-RPC server becomes extremely simple:\n\n```js\nvar rpc = require('json-rpc2');\n\nvar server = rpc.Server.create({\n    'websocket': true // is true by default\n});\n\nfunction add(args, opt, callback) {\n  callback(null, args[0] + args[1]);\n}\n\nserver.expose('add', add);\n\n// you can expose an entire object as well:\n\nserver.expose('namespace', {\n    'function1': function(){},\n    'function2': function(){},\n    'function3': function(){}\n});\n// expects calls to be namespace.function1, namespace.function2 and namespace.function3\n\n// listen creates an HTTP server on localhost only\nserver.listen(8000, 'localhost');\n```\n\nAnd creating a client to speak to that server is easy too:\n\n```js\nvar rpc = require('json-rpc2');\n\nvar client = rpc.Client.create(8000, 'localhost');\n\n// Call add function on the server\n\nclient.call('add', [1, 2], function(err, result) {\n    console.log('1 + 2 = ' + result);\n});\n```\n\nCreate a raw (socket) server using:\n\n```js\nvar rpc = require('json-rpc2');\n\nvar server = rpc.Server.create();\n\n// non-standard auth for RPC, when using this module using both client and server, works out-of-the-box\nserver.enableAuth('user', 'pass');\n\n// Listen on socket\nserver.listenRaw(8080, 'localhost');\n```\n\n## Extend, overwrite, overload\n\nAny class can be extended, or used as a mixin for new classes, since it uses [ES5Class](http://github.com/pocesar/ES5-Class) module.\n\nFor example, you may extend the `Endpoint` class, that automatically extends `Client` and `Server` classes.\nExtending `Connection` automatically extends `SocketConnection` and `HttpServerConnection`.\n\n```js\nvar rpc = require('json-rpc2');\n\nrpc.Endpoint.include({\n    'newFunction': function(){\n\n    }\n});\n\nvar\n    server = rpc.Server.create(),\n    client = rpc.Client.create();\n\nserver.newFunction(); // already available\nclient.newFunction(); // already available\n```\n\nTo implement a new class method (that can be called without an instance, like `rpc.Endpoint.newFunction`:\n\n```js\nvar rpc = require('json-rpc2');\n\nrpc.Endpoint.implement({\n    'newFunction': function(){\n    }\n});\n\nrpc.Endpoint.newFunction(); // available\nrpc.Client.newFunction(); // every\nrpc.Server.newFunction(); // where\n```\n\nDon't forget, when you are overloading an existing function, you can call the original function using `$super`\n\n```js\nvar rpc = require('json-rpc2');\n\nrpc.Endpoint.implement({\n    'trace': function(direction, message){\n        this.$super(' (' + direction + ')', message); //call the last defined function\n    }\n});\n```\n\nAnd you can start your classes directly from any of the classes\n\n```js\nvar MyCoolServer = require('json-rpc2').Server.define('MyCoolServer', {\n    myOwnFunction: function(){\n    },\n}, {\n    myOwnClassMethod: function(){\n    }\n}); // MyCoolServer will contain all class and instance functions from Server\n\nMyCoolServer.myOwnClassMethod(); // class function\nMyCoolServer.create().myOwnFunction(); // instance function\n```\n\n## Debugging\n\nThis module uses the [debug](http://github.com/visionmedia/debug) package, to debug it, you need to set the Node\nenvironment variable to jsonrpc, by setting it in command line as `set DEBUG=jsonrpc` or `export DEBUG=jsonrpc`\n\n## Examples\n\nTo learn more, see the `examples` directory, peruse `test/jsonrpc-test.js`, or\nsimply \"Use The Source, Luke\".\n\nMore documentation and development is on its way.\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/pocesar/node-jsonrpc2/issues"
  },
  "homepage": "https://github.com/pocesar/node-jsonrpc2",
  "_id": "json-rpc2@0.4.3",
  "dist": {
    "shasum": "6ed1d62c24df30e390d67504e8f7fc4e5ed950fc"
  },
  "_from": "json-rpc2@",
  "_resolved": "https://registry.npmjs.org/json-rpc2/-/json-rpc2-0.4.3.tgz"
}
